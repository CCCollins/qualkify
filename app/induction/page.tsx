'use client';

import { useState } from 'react';
import { FaRegArrowAltCircleRight } from "react-icons/fa";
import nerdamer from 'nerdamer';
import 'nerdamer/Algebra';
import 'nerdamer/Calculus';
import 'nerdamer/Solve';
import { TbSmartHome } from 'react-icons/tb';
import Link from 'next/link';

const validateExpression = (expr: string): void => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ–±–æ–∫
  const stack = [];
  for (const char of expr) {
    if (char === '(') stack.push(char);
    if (char === ')') {
      if (stack.length === 0) throw new Error('–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏');
      stack.pop();
    }
  }
  if (stack.length > 0) throw new Error('–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏');

  // –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const hasVariable =
    expr.includes('n') ||
    expr.includes('k') ||
    expr.includes('–¥–µ–ª–∏—Ç—Å—è –Ω–∞') ||
    expr.includes('‚â•') ||
    expr.includes('>=');

  if (!hasVariable) {
    throw new Error('–í—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (n –∏–ª–∏ k) –∏–ª–∏ –∑–Ω–∞–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (‚â•, >=)');
  }
};

const preprocess = (expr: string): string => {
  // –û—Ç–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç —É—Å–ª–æ–≤–∏–π
  const [mainExpr] = expr.split(' –¥–ª—è ');
  validateExpression(mainExpr);

  return mainExpr
    .replace(/\s+/g, '')
    .replace(/\^/g, '**')
    .replace(/(\d)([a-zA-Z(])/g, '$1*$2')
    .replace(/([a-zA-Z)])(\d)/g, '$1*$2')
    .replace(/([a-zA-Z)])([a-zA-Z(])/g, '$1*$2')
    .replace(/\.\.\./g, '');
};

const proveSum = (expr: string): string => {
  const [left, right] = expr.split('=').map(s => preprocess(s.trim()));
  const terms = left.split('+').map(t => t.trim().replace('...', ''));
  const generalTerm = terms[terms.length - 1]; // –û–±—â–∏–π —á–ª–µ–Ω —Ä—è–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, (2n-1))

  // –®–∞–≥ 1: –ë–∞–∑–∞ –∏–Ω–¥—É–∫—Ü–∏–∏ (n=1)
  const baseLeft = nerdamer(generalTerm.replace(/n/g, '1')).evaluate().text();
  const baseRight = nerdamer(right.replace(/n/g, '1')).evaluate().text();
  const baseValid = baseLeft === baseRight;

  // –®–∞–≥ 2: –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–¥—É–∫—Ü–∏–∏ (n=k)
  const sumToK = terms.map(t => t.replace(/n/g, 'k')).join('+');
  const assumedRight = right.replace(/n/g, 'k');

  // –®–∞–≥ 3: –ò–Ω–¥—É–∫—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ (n=k+1)
  const nextTerm = generalTerm.replace(/n/g, '(k+1)');
  const leftForK1 = `(${assumedRight})+(${nextTerm})`;
  const rightForK1 = right.replace(/n/g, '(k+1)');

  // @ts-expect-error: –ú–µ—Ç–æ–¥ simplify –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∏–ø–∞—Ö nerdamer, –Ω–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ runtime
  const difference = nerdamer(leftForK1).subtract(rightForK1).simplify();
  const stepValid = difference.toString() === '0';

  return `
–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–ª—è: ${expr}

1Ô∏è‚É£ –ë–∞–∑–∞ –∏–Ω–¥—É–∫—Ü–∏–∏ (n=1):
   ‚Ä¢ –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É: ${generalTerm.replace(/n/g, '1')} = ${baseLeft}
   ‚Ä¢ –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: ${right.replace(/n/g, '1')} = ${baseRight}
   ${baseValid ? '‚úÖ –†–∞–≤–µ–Ω—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' : '‚ùå –û—à–∏–±–∫–∞: —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –Ω–µ–≤–µ—Ä–Ω–æ'}

2Ô∏è‚É£ –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–¥—É–∫—Ü–∏–∏:
   –î–æ–ø—É—Å—Ç–∏–º, –¥–ª—è n=k –≤–µ—Ä–Ω–æ:
   ${sumToK} = ${assumedRight}

3Ô∏è‚É£ –ò–Ω–¥—É–∫—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ (n=k+1):
   ‚Ä¢ –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–ª–µ–Ω: ${nextTerm}
   ‚Ä¢ –õ–µ–≤–∞—è —á–∞—Å—Ç—å: ${sumToK} + ${nextTerm} = ${leftForK1}
   ‚Ä¢ –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: ${rightForK1}
   ‚Ä¢ –†–∞–∑–Ω–æ—Å—Ç—å: ${difference.toString()}
   ${stepValid ? '‚úÖ –£–ø—Ä–æ—â–∞–µ—Ç—Å—è –¥–æ 0' : '‚ùå –ù–µ —É–ø—Ä–æ—â–∞–µ—Ç—Å—è –¥–æ 0'}

${baseValid && stepValid
      ? 'üìå –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö n'
      : '‚ö†Ô∏è –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∞–≥–∏)'}
`;
};



const proveDivisibility = (expr: string): string => {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–∏—Ç–µ–ª—å
  const match = expr.match(/(.+)\s*–¥–µ–ª–∏—Ç—Å—è\s*–Ω–∞\s*(\d+)/);
  if (!match) {
    throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–ª–∏–º–æ—Å—Ç—å. –ü—Ä–∏–º–µ—Ä: 'n^3 - n –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3'");
  }

  const expression = match[1].trim();
  const divisor = parseInt(match[2].trim(), 10);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
  const processed = preprocess(expression);

  // –®–∞–≥ 1: –ë–∞–∑–∞ –∏–Ω–¥—É–∫—Ü–∏–∏ (n=0)
  const baseExpr = nerdamer(processed.replace(/n/g, '1')).evaluate().text();
  const baseMod = nerdamer(`mod(${baseExpr}, ${divisor})`).evaluate().text();
  const baseValid = baseMod === '0';

  // –®–∞–≥ 2: –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–¥—É–∫—Ü–∏–∏ (n=k)
  const f_k = processed.replace(/n/g, 'k');

  // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è n=k+1
  const f_k1 = processed.replace(/n/g, '(k+1)');
  const f_k1_expanded = nerdamer(f_k1).expand().text();

  // –†–∞–∑–Ω–æ—Å—Ç—å f(k+1) - f(k)
  const difference = nerdamer(f_k1).subtract(f_k).expand();
  const differenceMod = nerdamer(`mod(${difference}, ${divisor})`).evaluate().text();
  const stepValid = differenceMod === '0';

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  let resultText = `–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–µ–ª–∏–º–æ—Å—Ç–∏: ${expr}\n\n`;

  // –®–∞–≥ 1: –ë–∞–∑–∞ –∏–Ω–¥—É–∫—Ü–∏–∏
  resultText += `1Ô∏è‚É£ –ë–∞–∑–∞ –∏–Ω–¥—É–∫—Ü–∏–∏ (n=1):\n`;
  resultText += `   ‚Ä¢ f(1) = ${baseExpr}\n`;
  resultText += `   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ ${divisor}: ${baseMod}\n`;
  resultText += baseValid ? `   ‚úÖ –î–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞\n\n` : `   ‚ùå –ù–µ –¥–µ–ª–∏—Ç—Å—è\n\n`;

  // –®–∞–≥ 2: –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–¥—É–∫—Ü–∏–∏
  resultText += `2Ô∏è‚É£ –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–¥—É–∫—Ü–∏–∏ (n=k):\n`;
  resultText += `   ‚Ä¢ f(k) = ${f_k}\n`;
  resultText += `   ‚Ä¢ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ f(k) –¥–µ–ª–∏—Ç—Å—è –Ω–∞ ${divisor}\n\n`;

  // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è n=k+1
  resultText += `3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ n=k+1:\n`;
  resultText += `   ‚Ä¢ f(k+1) = ${f_k1}\n`;
  resultText += `   ‚Ä¢ –†–∞—Å–∫—Ä—ã—Ç–∏–µ f(k+1): ${f_k1_expanded}\n`;
  resultText += `   ‚Ä¢ –†–∞–∑–Ω–æ—Å—Ç—å f(k+1) - f(k) = ${difference}\n\n`;

  // –ò—Ç–æ–≥
  resultText += baseValid && stepValid
    ? `üìå –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–∫–∞–∑–∞–Ω–æ –ø–æ –∏–Ω–¥—É–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö n ‚àà ‚Ñï`
    : `‚ö†Ô∏è –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å f(k) –∏–∑ f(k+1) –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–ª–∏–º–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤`;

  return resultText;
};



const proveInequality = (expr: string): string => {
  const [inequality, condition] = expr.split(' –¥–ª—è ');
  const sign = inequality.match(/[<>‚â•‚â§=]+/)?.[0] || '‚â•';
  const [left, right] = inequality.split(sign).map(s => preprocess(s.trim()));

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –∏–Ω–¥—É–∫—Ü–∏–∏ (—Å–∏–º–≤–æ–ª—å–Ω–æ)
  const baseN = condition?.match(/n\s*[<>‚â•‚â§=]+\s*(\d+)/)?.[1] || '1';
  const baseLeft = left.replace(/n/g, baseN);
  const baseRight = right.replace(/n/g, baseN);

  // –°–∏–º–≤–æ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã
  // @ts-expect-error: –ú–µ—Ç–æ–¥ simplify –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∏–ø–∞—Ö nerdamer, –Ω–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ runtime
  const baseSymbolicCheck = nerdamer.simplify(`(${baseLeft})-(${baseRight})`).toString();
  const baseValid = baseSymbolicCheck === '0' ||
    (sign === '‚â•' && !baseSymbolicCheck.includes('-'));

  // –ò–Ω–¥—É–∫—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
  const kLeft = left.replace(/n/g, 'k');
  const kRight = right.replace(/n/g, 'k');
  const k1Left = left.replace(/n/g, '(k+1)');
  const k1Right = right.replace(/n/g, '(k+1)');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è
  let conditionCheck = '';
  if (condition) {
    conditionCheck = `\n–£—Å–ª–æ–≤–∏–µ: ${condition}`;
  }

  return `
–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞: ${inequality}
${conditionCheck}

1Ô∏è‚É£ –ë–∞–∑–∞ –∏–Ω–¥—É–∫—Ü–∏–∏ (n=${baseN}):
   ‚Ä¢ –õ–µ–≤–∞—è —á–∞—Å—Ç—å: ${baseLeft} = ${nerdamer(baseLeft).toString()}
   ‚Ä¢ –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: ${baseRight} = ${nerdamer(baseRight).toString()}
   ‚Ä¢ –†–∞–∑–Ω–æ—Å—Ç—å: ${baseSymbolicCheck}
   ${baseValid ? '‚úÖ –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' : '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞'}

2Ô∏è‚É£ –ò–Ω–¥—É–∫—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ:
   –ü—É—Å—Ç—å –¥–ª—è n=k (k‚â•${baseN}) –≤–µ—Ä–Ω–æ:
   ${kLeft} ${sign} ${kRight}

3Ô∏è‚É£ –ò–Ω–¥—É–∫—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥:
   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–∫–∞–∑–∞—Ç—å:
   ${k1Left} ${sign} ${k1Right}

–®–∞–≥–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:
1Ô∏è‚É£ –£–º–Ω–æ–∂—å—Ç–µ –æ–±–µ —á–∞—Å—Ç–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ (1+x)
   ${kLeft}*(1+x) ${sign} ${kRight}*(1+x)
2Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å:
   ${kRight}*(1+x) = ${nerdamer(`${kRight}*(1+x)`).expand().toString()}
3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å–ª–æ–≤–∏–µ ${condition || 'x ‚â• -1'}
4Ô∏è‚É£ –î–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ ${k1Left} ${sign} ${nerdamer(`${kRight}*(1+x)`).expand().toString()}

‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è ${condition}
- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ (1+x) ‚â• 0 (—ç—Ç–æ –≤–∞–∂–Ω–æ –ø—Ä–∏ —É–º–Ω–æ–∂–µ–Ω–∏–∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞)
`;
};



export default function InductionProver() {
  const [input, setInput] = useState('1+3+5+...+(2n-1)=n^2');
  const [output, setOutput] = useState('');

  const formatOutput = (text: string): string => {
    // –ó–∞–º–µ–Ω—è–µ–º ** (—Å—Ç–µ–ø–µ–Ω—å) –Ω–∞ ^
    const formatted = text.replace(/\*\*/g, '^');
    return formatted;
  };

  const handleProve = () => {
    try {
      let result;
      if (input.includes('–¥–µ–ª–∏—Ç—Å—è –Ω–∞')) {
        result = proveDivisibility(input);
      } else if (input.includes('‚â•')) {
        result = proveInequality(input);
      } else {
        result = proveSum(input);
      }
      setOutput(formatOutput(result));
    } catch (e) {
      setOutput(
        formatOutput(
          `–û—à–∏–±–∫–∞: ${
            e instanceof Error ? e.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
          }\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.`
        )
      );
    }
  };

  return (
    <div className="max-w-6xl mx-auto px-4">
      <div className="flex justify-center items-center mb-6">
        <Link
          href="/"
          className="text-blue-600 hover:text-blue-800 transition"
          title="–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        >
          <TbSmartHome className="text-3xl mr-2" />
        </Link>
        <h1 className="text-xl md:text-3xl font-bold text-center">
          –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ –∏–Ω–¥—É–∫—Ü–∏–∏
        </h1>
      </div>

      <div className="mb-4">
        <label className="block mb-2 font-medium">–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</label>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-2 mb-4">
          {[
            '1+3+5+...+(2n-1)=n^2',
            'n^3-n –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3',
            '(1+x)^n‚â•1+n*x –¥–ª—è x‚â•-1',
            '1+2+...+n=n(n+1)/2',
            '5^n-4n+15 –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 16',
            '2^n‚â•n^2 –¥–ª—è n‚â•4',
          ].map((ex, i) => (
            <button
              key={i}
              onClick={() => setInput(ex)}
              className="bg-gray-100 hover:bg-gray-200 p-2 rounded text-sm truncate"
              title={ex}
            >
              {ex}
            </button>
          ))}
        </div>
      </div>

      <div className="mb-6">
        <label className="block mb-2 font-medium">–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:</label>
        <div className="flex items-center border rounded-md overflow-hidden">
          <input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter') handleProve();
            }}
            className="w-full p-3 text-lg border-none focus:ring-0"
            placeholder="–ü—Ä–∏–º–µ—Ä—ã: 1+2+...+n=n(n+1)/2, n^3-n –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3, (1+x)^n‚â•1+n*x"
          />
          <button
            onClick={handleProve}
            className="bg-blue-600 text-white rounded-full px-2 py-2 mr-2 ml-2 hover:bg-blue-700 transition"
          >
            <FaRegArrowAltCircleRight className="text-lg" />
          </button>
        </div>
      </div>

      <pre
        className="bg-gray-50 p-4 rounded-lg border overflow-auto text-sm whitespace-pre-wrap"
        dangerouslySetInnerHTML={{ __html: output || '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...' }}
      />
    </div>
  );
}
