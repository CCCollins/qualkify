'use client';

import { useState } from 'react';
import Link from 'next/link';
import { TbSmartHome, TbTrash } from 'react-icons/tb';

export default function BudgetQuickPage() {
  const [incomeRaw, setIncomeRaw] = useState('');
  const [expensesRaw, setExpensesRaw] = useState('');
  const [precision, setPrecision] = useState(2);

  const parseValues = (str: string): number[] => {
    return str
      .trim()
      .split(/\s+/)
      .map(expr => {
        try {
          const normalized = expr.replace(',', '.');
          if (/^[\d.+\-*/\s()]+$/.test(normalized)) {
            return Function(`"use strict"; return (${normalized})`)();
          }
          return 0;
        } catch {
          return 0;
        }
      })
      .filter(n => !isNaN(n));
  };

  const incomeVals = parseValues(incomeRaw);
  const expenseVals = parseValues(expensesRaw);

  const incomeSum = incomeVals.reduce((sum, n) => sum + n, 0);
  const expenseSum = expenseVals.reduce((sum, n) => sum + n, 0);
  const balance = incomeSum - expenseSum;

  const status =
    balance > 0 ? '–ü—Ä–æ—Ñ–∏—Ü–∏—Ç–Ω—ã–π' : balance < 0 ? '–î–µ—Ñ–∏—Ü–∏—Ç–Ω—ã–π' : '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π';

  const percent = (val: number) =>
    incomeSum > 0 ? Math.min(Math.abs(val / incomeSum) * 100, 100) : 0;

  const safe = (n: number, digits = precision) =>
    isNaN(n) || !isFinite(n) ? '0,00' : n.toFixed(digits).replace('.', ',');

  const resetFields = () => {
    setIncomeRaw('');
    setExpensesRaw('');
  };

  return (
    <main className="max-w-4xl mx-auto px-4 space-y-6 pb-10">
      <div className="flex justify-center items-center mb-6">
        <Link href="/" className="text-blue-600 hover:text-blue-800 transition" title="–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞">
          <TbSmartHome className="text-3xl mr-2" />
        </Link>
        <h1 className="text-xl md:text-3xl font-bold text-center">
          –ë–∞–ª–∞–Ω—Å –±—é–¥–∂–µ—Ç–∞
        </h1>
      </div>

      <div className="bg-blue-50 border-l-4 border-blue-400 p-4 text-sm rounded">
        <ul className="list-disc list-inside text-xs text-gray-700">
          <li><b>–î–æ—Ö–æ–¥—ã = –†–µ–≥—É–ª–∏—Ä—É—é—â–∏–µ + –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ:</b> –Ω–∞–ª–æ–≥–∏, —Å–±–æ—Ä—ã, –∞–∫—Ü–∏–∑—ã, –ø—Ä–∏–±—ã–ª—å –≥–æ—Å–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π, –ø–æ—à–ª–∏–Ω—ã, —Å–æ—Ü–≤–∑–Ω–æ—Å—ã, ...</li>
          <li><b>–†–∞—Å—Ö–æ–¥—ã = –î–µ—Ñ–∏—Ü–∏—Ç + –î–æ—Ö–æ–¥—ã:</b> –≥–æ—Å–¥–æ–ª–≥, –≥–æ—Å–∑–∞–∫—É–ø–∫–∏, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—Ç—ã, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, ...</li>
          <li><b>–ì–æ—Å. –¥–æ–ª–≥ –Ω–∞ –∫–æ–Ω–µ—Ü –≥–æ–¥–∞ = –ì–æ—Å. –¥–æ–ª–≥ –Ω–∞ –Ω–∞—á–∞–ª–æ –≥–æ–¥–∞ + –î–µ—Ñ–∏—Ü–∏—Ç</b></li>
          <li><b>–ë—Ä–µ–º—è –≥–æ—Å. –¥–æ–ª–≥–∞ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ / –í–ù–ü</b></li>
        </ul>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
        <label>
          <span className="font-medium">–î–æ—Ö–æ–¥—ã</span>
          <textarea
            rows={3}
            value={incomeRaw}
            onChange={e => setIncomeRaw(e.target.value)}
            placeholder="840/120*100 9 ..."
            className="w-full mt-1 p-2 border rounded shadow-sm focus:ring focus:ring-blue-200 transition"
          />
        </label>

        <label>
          <span className="font-medium">–†–∞—Å—Ö–æ–¥—ã</span>
          <textarea
            rows={3}
            value={expensesRaw}
            onChange={e => setExpensesRaw(e.target.value)}
            placeholder="34 25 15 + 140*0.08 ..."
            className="w-full mt-1 p-2 border rounded shadow-sm focus:ring focus:ring-blue-200 transition"
          />
        </label>
      </div>

      <div className="relative bg-white p-4 rounded shadow text-sm space-y-3 mt-4">
        <h4 className="font-semibold text-base mb-1 pr-8">
          üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—é–¥–∂–µ—Ç–∞ (
          <input
            id="precision"
            type="number"
            min={0}
            max={10}
            value={precision}
            onChange={(e) => setPrecision(Number(e.target.value))}
            onFocus={(e) => e.target.select()}
            className="w-8"
          />
          –∑–Ω–∞–∫–æ–≤)
        </h4>

        <button
          onClick={resetFields}
          className="absolute top-4 right-4 text-gray-600 hover:text-black"
          title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è"
        >
          <TbTrash className="text-xl" />
        </button>

        <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6">
          <div><strong>–°—É–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤:</strong> {safe(incomeSum, precision)}</div>
          <div><strong>–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤:</strong> {safe(expenseSum, precision)}</div>
          <div><strong>–°–∞–ª—å–¥–æ:</strong> {safe(balance, precision)}</div>
          <div>
            <strong>–ë—é–¥–∂–µ—Ç:</strong>{' '}
            <span className={`font-semibold ${balance > 0 ? 'text-green-600' : balance < 0 ? 'text-red-600' : 'text-yellow-600'}`}>
              {status}
            </span>
          </div>
        </div>

        <div className="space-y-2 mt-4">
          {/* –î–æ—Ö–æ–¥—ã */}
          <div className="text-xs font-medium text-gray-700">–†–∞—Å—Ö–æ–¥—ã</div>
          <div className="relative h-5 rounded bg-gradient-to-r from-rose-100 to-red-200 overflow-hidden">
            <div
              className="absolute top-0 bottom-0 left-0 bg-red-500 transition-all duration-300"
              style={{ width: `${percent(expenseSum)}%` }}
              title="–î–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤"
            />
            <div className="absolute inset-0 flex items-center justify-end px-2 text-xs text-white font-bold">
              {safe(expenseSum)}
            </div>
          </div>

          {/* –°–∞–ª—å–¥–æ */}
          <div className="text-xs font-medium text-gray-700">–°–∞–ª—å–¥–æ</div>
          <div className="relative h-5 rounded bg-gradient-to-r from-green-100 to-green-200 overflow-hidden">
            <div
              className={`absolute top-0 bottom-0 left-0 ${balance < 0 ? 'bg-orange-500' : 'bg-green-600'} transition-all duration-300`}
              style={{ width: `${percent(balance)}%` }}
              title="–°–∞–ª—å–¥–æ"
            />
            <div className="absolute inset-0 flex items-center justify-end px-2 text-xs text-white font-bold">
              {safe(balance)}
            </div>
          </div>

          {/* –õ–µ–≥–µ–Ω–¥–∞ */}
          <div className="flex justify-between text-xs text-gray-500 mt-1">
            <span>0%</span>
            <span>100% –æ—Ç –¥–æ—Ö–æ–¥–æ–≤ ({safe(incomeSum)})</span>
          </div>
        </div>
      </div>
    </main>
  );
}
